This is a system of makefiles to build coq and the programs it needs.

-----------------------------------------------------------------------------

To prepare to build, add some packages:

   Under Debian 6.0 (date 2012/12):

      sudo apt-get install -y autoconf autotools-dev automake libxml2-dev libgtksourceview2.0-dev

   Under Scientific Linux 6.4:

      sudo yum install -y git gtk2-devel libxml2-devel

   Under Mac OS X, 10.9.2:

      Type "make" on a command line, and if the "Command Line Tools" are not installed
      ("make" is one of them), then the system will offer to install them for you.
      You don't have to also install "Xcode", which is a graphical user interface
      to a development environment.

      Also, go to http://brew.sh to install "brew", and use the commands
      	  brew install wget pkg-config libxml2 glib
	  brew link glib
	  brew install gtk+
      to install various packages.  "Brew" works best if /usr/local is empty.  If it 
      isn't, and you have installed other software there as root, you may have to
      change some permissions of some directories.  (It may also ask you
      to install XQuartz, but it gives the URL and it's easy to do.)

-----------------------------------------------------------------------------

To build:

Run the following command once for the users, after putting this directory tree
in its final location:

      make

It is best if the path to the directory containing this file contains no
spaces.

Here's what happens after you type "make".

   - the compiled programs and associated files are installed in ./encap-2/.
     In certain situations it may be desirable to increment the 2 to 3 so as
     to keep a backup of compiled files on disk.

   - for some packages, links to the compiled files and associated files are
     created in ./bin, ./lib, ./man, ./share, etc.  The purpose of the shell
     script "with" is to set up your environment so the programs can be 
     run correctly.  For example, ./bin is added to your path in fully
     prefixed form.

   - a file ./README.user is created that explains how to use the resulting
     programs.  It explains the shell script "with", and it includes full paths
     to the files and directories.

   - for some packages, links are not created.  The shell script "with"
     can be used to make those available, too.  The appropriate "with"
     command for your favorite purposes can be added to the user's .profile.

To bypass the making of the default packages and build just the one you want,
do this:

     make -C src install-XXX

where XXX is the source directory of the package.  Example:

     make -C src install-coq83patched

To also get the links created, do this:

     make -C src linkup-XXX

, but beware the possibility of conflicting links from other versions.  If you
want to remove the links for a package YYY, do something like this:

     make -C src unlinkup-YYY

-----------------------------------------------------------------------------

To clean up:

  After building, the following command will remove the source code previously
  downloaded and the temporary files created while building:

    make clean

  The installed package files remain.  To clean up everything, use the
  following command:

    make distclean

-----------------------------------------------------------------------------

A possible configuration of files in your home directory, assuming
/usr/local/hott is the path to this directory:

   add these symbolic links:

	debian$ cd /usr/local/bin
	debian$ ls -l
	total 0
	lrwxrwxrwx 1 root staff 16 Dec 19 21:04 coqc -> ../hott/bin/hoqc
	lrwxrwxrwx 1 root staff 18 Dec 19 21:04 coqide -> ../hott/bin/hoqide
	lrwxrwxrwx 1 root staff 18 Dec 19 21:04 coqtop -> ../hott/bin/hoqtop

   add to .profile:

	PATH=/usr/local/hott/bin:$PATH
	export PATH

   add to .emacs:

	;; Proof General
	(setq load-path 
	      (append
	       '( 
		  "/usr/local/hott/share/emacs/site-lisp" 
		  "/usr/local/hott/share/emacs/site-lisp/ProofGeneral/generic" 
		  )
	       load-path
	       ))
	(load-library "proof-site") ;normally installed in /usr/share/emacs/site-lisp
	(custom-set-variables
	  ;; custom-set-variables was added by Custom.
	  ;; If you edit it by hand, you could mess it up, so be careful.
	  ;; Your init file should contain only one such instance.
	  ;; If there is more than one, they won't work right.
	 '(coq-prog-name "/usr/local/hott/bin/hoqtop"))
	(custom-set-faces
	  ;; custom-set-faces was added by Custom.
	  ;; If you edit it by hand, you could mess it up, so be careful.
	  ;; Your init file should contain only one such instance.
	  ;; If there is more than one, they won't work right.
	 )
